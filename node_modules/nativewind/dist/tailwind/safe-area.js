"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeArea = void 0;
const plugin_1 = __importDefault(require("tailwindcss/plugin"));
exports.safeArea = (0, plugin_1.default)(({ addUtilities, matchUtilities, theme }) => {
    const platform = process.env.NATIVEWIND_PLATFORM ?? "web";
    const baseUtilities = {
        ".m-safe": {
            marginTop: "env(safe-area-inset-top)",
            marginRight: "env(safe-area-inset-right)",
            marginBottom: "env(safe-area-inset-bottom)",
            marginLeft: "env(safe-area-inset-left)",
        },
        ".mx-safe": {
            marginRight: "env(safe-area-inset-right)",
            marginLeft: "env(safe-area-inset-left)",
        },
        ".my-safe": {
            marginTop: "env(safe-area-inset-top)",
            marginBottom: "env(safe-area-inset-bottom)",
        },
        ".mt-safe": {
            marginTop: "env(safe-area-inset-top)",
        },
        ".mr-safe": {
            marginRight: "env(safe-area-inset-right)",
        },
        ".mb-safe": {
            marginBottom: "env(safe-area-inset-bottom)",
        },
        ".ml-safe": {
            marginLeft: "env(safe-area-inset-left)",
        },
        ".p-safe": {
            paddingTop: "env(safe-area-inset-top)",
            paddingRight: "env(safe-area-inset-right)",
            paddingBottom: "env(safe-area-inset-bottom)",
            paddingLeft: "env(safe-area-inset-left)",
        },
        ".px-safe": {
            paddingRight: "env(safe-area-inset-right)",
            paddingLeft: "env(safe-area-inset-left)",
        },
        ".py-safe": {
            paddingTop: "env(safe-area-inset-top)",
            paddingBottom: "env(safe-area-inset-bottom)",
        },
        ".pt-safe": {
            paddingTop: "env(safe-area-inset-top)",
        },
        ".pr-safe": {
            paddingRight: "env(safe-area-inset-right)",
        },
        ".pb-safe": {
            paddingBottom: "env(safe-area-inset-bottom)",
        },
        ".pl-safe": {
            paddingLeft: "env(safe-area-inset-left)",
        },
        ".top-safe": {
            top: "env(safe-area-inset-top)",
        },
        ".right-safe": {
            right: "env(safe-area-inset-right)",
        },
        ".bottom-safe": {
            bottom: "env(safe-area-inset-bottom)",
        },
        ".left-safe": {
            left: "env(safe-area-inset-left)",
        },
        ".h-screen-safe": {
            height: [
                "calc(100vh - (env(safe-area-inset-top) + env(safe-area-inset-bottom)))",
            ],
        },
    };
    if (platform === "web") {
        baseUtilities[".h-screen-safe"].height.push("-webkit-fill-available");
    }
    addUtilities(baseUtilities);
    const offsetUtilities = {};
    for (const [selector, propertyValue] of Object.entries(baseUtilities)) {
        const className = selector.slice(1);
        offsetUtilities[`${className}-offset`] = (x) => {
            const acc = {};
            for (const [property, value] of Object.entries(propertyValue)) {
                if (Array.isArray(value)) {
                    acc[property] = value.map((v) => v === "-webkit-fill-available" ? v : `calc(${v} + ${x})`);
                }
                else {
                    acc[property] = `calc(${value} + ${x})`;
                }
            }
            return acc;
        };
    }
    matchUtilities(offsetUtilities, {
        values: theme("spacing"),
        supportsNegativeValues: true,
    });
    const orUtilities = {};
    for (const [selector, propertyValue] of Object.entries(baseUtilities)) {
        const className = selector.slice(1);
        orUtilities[`${className}-or`] = (x) => {
            const acc = {};
            for (const [property, value] of Object.entries(propertyValue)) {
                if (Array.isArray(value)) {
                    acc[property] = value.map((v) => v === "-webkit-fill-available" ? v : `max(${v}, ${x})`);
                }
                else {
                    acc[property] = `max(${value}, ${x})`;
                }
            }
            return acc;
        };
    }
    matchUtilities(orUtilities, {
        values: theme("spacing"),
        supportsNegativeValues: true,
    });
});
//# sourceMappingURL=safe-area.js.map