"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transform = void 0;
const metro_transform_worker_1 = __importDefault(require("metro-transform-worker"));
const css_to_rn_1 = require("../css-to-rn");
function transform(config, projectRoot, filename, data, options) {
    const transformer = config.transformerPath
        ? require(config.transformerPath).transform
        : metro_transform_worker_1.default.transform;
    const isCss = options.type !== "asset" && matchCss(filename);
    if (!isCss || options.platform === "web") {
        return transformer(config, projectRoot, filename, data, options);
    }
    const runtimeData = JSON.stringify((0, css_to_rn_1.cssToReactNativeRuntime)(data, config.cssToReactNativeRuntime));
    const isCSSModule = matchCssModule(filename);
    data = isCSSModule
        ? `module.exports = require("react-native-css-interop").StyleSheet.create(${runtimeData});`
        : `require("react-native-css-interop").StyleSheet.registerCompiled(${runtimeData});`;
    if (options.platform !== "web" && options.dev && options.hot) {
        data = `${data}\nrequire("react-native-css-interop/dist/metro/poll-update-client")`;
    }
    data = Buffer.from(data);
    return metro_transform_worker_1.default.transform(config, projectRoot, filename, data, options);
}
exports.transform = transform;
function matchCss(filePath) {
    return /\.css$/.test(filePath);
}
function matchCssModule(filePath) {
    return /\.module(\.(native|ios|android|web))?\.css$/.test(filePath);
}
//# sourceMappingURL=transformer.js.map