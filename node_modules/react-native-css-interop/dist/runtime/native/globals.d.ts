/// <reference types="react" />
import { Appearance, Dimensions } from "react-native";
import { INTERNAL_RESET, INTERNAL_SET } from "../../shared";
import type { ColorSchemeVariableValue, ExtractionWarning, RuntimeValueDescriptor } from "../../types";
import { Effect, Observable, ObservableOptions } from "../observable";
import type { ComponentState } from "./native-interop";
export declare const warnings: Map<string, ExtractionWarning[]>;
export declare const warned: Set<string>;
export declare const externalCallbackRef: {
    current: ((className: string) => void) | undefined;
};
export declare const rootVariables: Record<string, Observable<any>>;
export declare const universalVariables: Record<string, Observable<any>>;
export declare const variableContext: import("react").Context<Record<string, any>>;
export declare const containerContext: import("react").Context<Record<string, ComponentState>>;
export declare const systemColorScheme: Observable<"light" | "dark">;
export declare const colorScheme: {
    set(value: "light" | "dark" | "system"): void;
    get: (effect?: Effect | undefined) => "light" | "dark" | undefined;
    toggle(): void;
    [INTERNAL_RESET]: (appearance: typeof Appearance) => void;
};
export declare function cssVariableObservable(value?: ColorSchemeVariableValue, { name }?: ObservableOptions<never>): {
    get(effect?: Effect): RuntimeValueDescriptor;
    set(value: ColorSchemeVariableValue | RuntimeValueDescriptor, notify?: boolean): void;
};
export declare const rem: Observable<number>;
export declare const vw: {
    get: (effect?: Effect) => number;
    [INTERNAL_RESET]: (dimensions: Dimensions) => void;
    [INTERNAL_SET](value: number): void;
};
export declare const vh: {
    get: (effect?: Effect) => number;
    [INTERNAL_RESET]: (dimensions: Dimensions) => void;
    [INTERNAL_SET](value: number): void;
};
export declare const isReduceMotionEnabled: Observable<boolean> & {
    [INTERNAL_RESET]: () => void;
};
