"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useUnstableNativeVariable = exports.vars = exports.useColorScheme = exports.remapProps = exports.cssInterop = exports.interopComponents = exports.rem = exports.colorScheme = exports.StyleSheet = void 0;
const react_1 = require("react");
const config_1 = require("../config");
const globals_1 = require("./globals");
const observable_1 = require("../observable");
const stylesheet_1 = require("./stylesheet");
const native_interop_1 = require("./native-interop");
const style_store_1 = require("./style-store");
var stylesheet_2 = require("./stylesheet");
Object.defineProperty(exports, "StyleSheet", { enumerable: true, get: function () { return stylesheet_2.StyleSheet; } });
var globals_2 = require("./globals");
Object.defineProperty(exports, "colorScheme", { enumerable: true, get: function () { return globals_2.colorScheme; } });
Object.defineProperty(exports, "rem", { enumerable: true, get: function () { return globals_2.rem; } });
exports.interopComponents = new Map();
const cssInterop = (baseComponent, mapping) => {
    const configs = (0, config_1.getNormalizeConfig)(mapping);
    let component;
    if (typeof baseComponent === "function") {
        component = (props) => {
            return (0, native_interop_1.interop)(baseComponent, configs, props, undefined);
        };
    }
    else {
        component = (0, react_1.forwardRef)((props, ref) => {
            return (0, native_interop_1.interop)(baseComponent, configs, props, ref);
        });
    }
    component.displayName = `CssInterop.${baseComponent.displayName ?? baseComponent.name ?? "unknown"}`;
    exports.interopComponents.set(baseComponent, component);
    return component;
};
exports.cssInterop = cssInterop;
const remapProps = (component, mapping) => {
    const configs = (0, config_1.getNormalizeConfig)(mapping);
    const interopComponent = (0, react_1.forwardRef)(function RemapPropsComponent({ ...props }, ref) {
        for (const config of configs) {
            let rawStyles = [];
            const source = props?.[config.source];
            if (typeof source !== "string")
                continue;
            delete props[config.source];
            for (const className of source.split(/\s+/)) {
                const signal = stylesheet_1.globalStyles.get(className);
                if (signal !== undefined) {
                    const style = {};
                    const styleRuleSet = signal.get();
                    style_store_1.opaqueStyles.set(style, styleRuleSet);
                    rawStyles.push(style);
                }
            }
            if (rawStyles.length !== 0) {
                const existingStyle = props[config.target];
                if (Array.isArray(existingStyle)) {
                    rawStyles.push(...existingStyle);
                }
                else if (existingStyle) {
                    rawStyles.push(existingStyle);
                }
                props[config.target] =
                    rawStyles.length === 1 ? rawStyles[0] : rawStyles;
            }
        }
        props.ref = ref;
        return (0, react_1.createElement)(component, props, props.children);
    });
    exports.interopComponents.set(component, interopComponent);
    return interopComponent;
};
exports.remapProps = remapProps;
function useColorScheme() {
    const [effect, setEffect] = (0, react_1.useState)(() => ({
        rerun: () => setEffect((s) => ({ ...s })),
        dependencies: new Set(),
    }));
    return {
        colorScheme: globals_1.colorScheme.get(effect),
        setColorScheme: globals_1.colorScheme.set,
        toggleColorScheme: globals_1.colorScheme.toggle,
    };
}
exports.useColorScheme = useColorScheme;
function vars(variables) {
    const style = {};
    style_store_1.opaqueStyles.set(style, {
        $$type: "StyleRuleSet",
        variables: true,
        normal: [
            {
                $$type: "StyleRule",
                specificity: { inline: 1 },
                variables: Object.entries(variables).map(([name, value]) => {
                    return [name.startsWith("--") ? name : `--${name}`, value];
                }),
            },
        ],
    });
    return style;
}
exports.vars = vars;
const useUnstableNativeVariable = (name) => {
    const context = (0, react_1.useContext)(globals_1.variableContext);
    const [effect, setState] = (0, react_1.useState)(() => ({
        rerun: () => setState((s) => ({ ...s })),
        dependencies: new Set(),
    }));
    let value = context[name];
    if (typeof value === "object" && "get" in value) {
        (0, observable_1.cleanupEffect)(effect);
        value = value.get(effect);
    }
    return value;
};
exports.useUnstableNativeVariable = useUnstableNativeVariable;
//# sourceMappingURL=api.js.map