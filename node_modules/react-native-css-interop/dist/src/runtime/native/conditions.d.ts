import type { ContainerCondition, Declaration, MediaQuery } from "lightningcss";
import { AttributeCondition, ExtractedContainerQuery, PseudoClassesQuery, StyleRule } from "../../types";
import { Effect } from "../observable";
import type { PropState } from "./native-interop";
interface ConditionReference {
    width: number | {
        get: (effect?: Effect) => number;
    };
    height: number | {
        get: (effect?: Effect) => number;
    };
}
export declare function testRule(state: PropState, rule: StyleRule, props: Record<string, any> | null | undefined): boolean;
export declare function testMediaQueries(state: PropState, mediaQueries: MediaQuery[]): boolean;
export declare function testMediaQuery(state: PropState, mediaQuery: MediaQuery, conditionReference?: ConditionReference): boolean;
export declare function testPseudoClasses(propState: PropState, meta: PseudoClassesQuery, interaction?: {
    active?: import("../observable").Observable<boolean> | undefined;
    hover?: import("../observable").Observable<boolean> | undefined;
    focus?: import("../observable").Observable<boolean> | undefined;
    layout?: import("../observable").Observable<[number, number]> | undefined;
}): boolean;
export declare function testContainerQuery(state: PropState, containerQuery: ExtractedContainerQuery[] | undefined): boolean;
export declare function testCondition(state: PropState, condition: ContainerCondition<Declaration> | null | undefined, conditionReference: ConditionReference): boolean;
export declare function getTestAttributeValue(props: Record<string, any> | null | undefined, condition: AttributeCondition): any;
export declare function testAttribute(propValue: any, condition: AttributeCondition): boolean;
export {};
