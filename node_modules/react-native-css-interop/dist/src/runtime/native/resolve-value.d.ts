import type { AnimatableValue } from "react-native-reanimated";
import type { EasingFunction, Time } from "lightningcss";
import type { RuntimeValueDescriptor, RuntimeValueFrame } from "../../types";
import { Effect } from "../observable";
import { PropState } from "./native-interop";
export declare function resolveValue(state: PropState, descriptor: RuntimeValueDescriptor | string | number | boolean, style?: Record<string, any>): any;
export declare function resolveAnimation(state: PropState, [initialFrame, ...frames]: RuntimeValueFrame[], property: string, props: Record<string, any> | undefined, normalizedProps: Record<string, any>, delay: number, totalDuration: number, timingFunction: EasingFunction): [AnimatableValue, AnimatableValue, ...AnimatableValue[]];
export declare function resolveTransitionValue(state: PropState, props: Record<string, any> | undefined, normalizedProps: Record<string, any>, property: string): {
    defaultValue: AnimatableValue;
    value: any;
};
export declare const timeToMS: (time: Time) => number;
export declare function getEasing(timingFunction: EasingFunction, Easing: typeof import("react-native-reanimated")["Easing"]): ((t: number) => number) | {
    factory: () => (x: number) => number;
};
export declare function setDeep(target: Record<string, any>, paths: string[], value: any): void;
export declare const defaultValues: Record<string, AnimatableValue | ((effect: Effect) => AnimatableValue)>;
