"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.upsertGlobalStyle = exports.opaqueStyles = exports.globalStyles = void 0;
const observable_1 = require("../observable");
const globals_1 = require("./globals");
exports.globalStyles = new Map();
exports.opaqueStyles = new WeakMap();
function upsertGlobalStyle(name, ruleSet) {
    let styleObservable = exports.globalStyles.get(name);
    if (!styleObservable) {
        styleObservable = (0, observable_1.observable)(ruleSet, { name });
        exports.globalStyles.set(name, styleObservable);
        if (process.env.NODE_ENV !== "production") {
            const originalGet = styleObservable.get;
            styleObservable.get = () => {
                const value = originalGet();
                printWarnings(name, value);
                return value;
            };
        }
        styleObservable.set(ruleSet);
    }
    else if (!deepEqual(styleObservable.get(), ruleSet)) {
        styleObservable.set(ruleSet);
    }
}
exports.upsertGlobalStyle = upsertGlobalStyle;
function deepEqual(obj1, obj2) {
    if (obj1 === obj2)
        return true;
    if (obj1 !== Object(obj1) && obj2 !== Object(obj2))
        return obj1 === obj2;
    if (Object.keys(obj1).length !== Object.keys(obj2).length)
        return false;
    for (let key in obj1) {
        if (!(key in obj2))
            return false;
        if (!deepEqual(obj1[key], obj2[key]))
            return false;
    }
    return true;
}
function printWarnings(name, ruleSet) {
    if (!("$$type" in ruleSet) || !ruleSet.warnings)
        return;
    if (process.env.NODE_ENV === "test") {
        globals_1.warnings.set(name, ruleSet.warnings);
    }
    else {
        globals_1.warned.add(name);
    }
}
//# sourceMappingURL=style-store.js.map