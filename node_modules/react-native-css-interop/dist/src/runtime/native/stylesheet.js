"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StyleSheet = exports.globalStyles = exports.animationMap = void 0;
const react_native_1 = require("react-native");
const shared_1 = require("../../shared");
const style_store_1 = require("./style-store");
Object.defineProperty(exports, "globalStyles", { enumerable: true, get: function () { return style_store_1.globalStyles; } });
const globals_1 = require("./globals");
exports.animationMap = new Map();
const commonStyleSheet = {
    [shared_1.INTERNAL_FLAGS]: {},
    [shared_1.INTERNAL_RESET]({ dimensions = react_native_1.Dimensions, appearance = react_native_1.Appearance } = {}) {
        style_store_1.globalStyles.clear();
        exports.animationMap.clear();
        globals_1.warnings.clear();
        globals_1.warned.clear();
        globals_1.rem.set(14, false);
        globals_1.vw[shared_1.INTERNAL_RESET](dimensions);
        globals_1.vh[shared_1.INTERNAL_RESET](dimensions);
        globals_1.colorScheme[shared_1.INTERNAL_RESET](appearance);
    },
    getFlag(name) {
        return this[shared_1.INTERNAL_FLAGS][name];
    },
    unstable_hook_onClassName(callback) {
        globals_1.externalCallbackRef.current = callback;
    },
    register() {
        throw new Error("Stylesheet.register is not yet implemented");
    },
    getGlobalStyle(name) {
        return style_store_1.globalStyles.get(name);
    },
    registerCompiled(options) {
        this[shared_1.INTERNAL_FLAGS]["$$receivedData"] = "true";
        if (options.flags) {
            Object.assign(this[shared_1.INTERNAL_FLAGS], options.flags);
        }
        options.rules?.forEach((rule) => (0, style_store_1.upsertGlobalStyle)(rule[0], rule[1]));
        options.keyframes?.forEach((keyframe) => {
            exports.animationMap.set(keyframe[0], keyframe[1]);
        });
        if (options.rootVariables) {
            for (const [name, value] of Object.entries(options.rootVariables)) {
                let variable = globals_1.rootVariables[name];
                if (!variable) {
                    variable = (0, globals_1.cssVariableObservable)(value);
                    globals_1.rootVariables[name] = variable;
                }
                variable.set(value);
            }
        }
        if (options.universalVariables) {
            for (const [name, value] of Object.entries(options.universalVariables)) {
                let variable = globals_1.universalVariables[name];
                if (!variable) {
                    variable = (0, globals_1.cssVariableObservable)(value);
                    globals_1.universalVariables[name] = variable;
                }
                variable.set(value);
            }
        }
        if (options.rem)
            globals_1.rem.set(options.rem);
    },
};
exports.StyleSheet = Object.assign({}, commonStyleSheet, react_native_1.StyleSheet);
//# sourceMappingURL=stylesheet.js.map