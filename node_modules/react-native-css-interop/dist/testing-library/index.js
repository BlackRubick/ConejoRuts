"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.revealStyles = exports.registerCSS = exports.resetComponents = exports.resetStyles = exports.createRemappedComponent = exports.createMockComponent = exports.render = exports.renderJSX = exports.warnings = void 0;
const JSX = __importStar(require("react/jsx-runtime"));
const react_native_1 = require("@testing-library/react-native");
const api_1 = require("../runtime/native/api");
const shared_1 = require("../shared");
const css_to_rn_1 = require("../css-to-rn");
require("../runtime/components");
const api_2 = require("../runtime/api");
const wrap_jsx_1 = __importDefault(require("../runtime/wrap-jsx"));
const react_1 = require("react");
const style_store_1 = require("../runtime/native/style-store");
__exportStar(require("../types"), exports);
var globals_1 = require("../runtime/native/globals");
Object.defineProperty(exports, "warnings", { enumerable: true, get: function () { return globals_1.warnings; } });
exports.renderJSX = (0, wrap_jsx_1.default)(JSX.jsx);
const render = (component, options) => (0, react_native_1.render)((0, exports.renderJSX)(component.type, component.props, component.key), options);
exports.render = render;
const createMockComponent = (Component, mapping = {
    className: "style",
}) => {
    (0, api_2.cssInterop)(Component, mapping);
    const mock = jest.fn(({ ...props }, ref) => {
        props.ref = ref;
        return (0, exports.renderJSX)(Component, props, "", false, undefined, undefined);
    });
    return Object.assign((0, react_1.forwardRef)(mock), { mock });
};
exports.createMockComponent = createMockComponent;
const createRemappedComponent = (Component, mapping = {
    className: "style",
}) => {
    (0, api_2.remapProps)(Component, mapping);
    const mock = jest.fn((props, ref) => {
        props.ref = ref;
        return (0, exports.renderJSX)(Component, props, "", false, undefined, undefined);
    });
    return Object.assign((0, react_1.forwardRef)(mock), { mock });
};
exports.createRemappedComponent = createRemappedComponent;
const resetStyles = () => {
    api_1.StyleSheet[shared_1.INTERNAL_RESET]();
};
exports.resetStyles = resetStyles;
const resetComponents = () => {
    api_2.interopComponents.clear();
};
exports.resetComponents = resetComponents;
function registerCSS(css, options) {
    api_1.StyleSheet.registerCompiled((0, css_to_rn_1.cssToReactNativeRuntime)(css, options));
}
exports.registerCSS = registerCSS;
function revealStyles(obj) {
    switch (typeof obj) {
        case "string":
        case "number":
        case "bigint":
        case "boolean":
        case "symbol":
        case "undefined":
        case "function":
            return obj;
        case "object":
        default: {
            const style = style_store_1.opaqueStyles.get(obj);
            if (style)
                return style;
            return Object.fromEntries(Object.entries(obj).map(([key, value]) => {
                switch (typeof value) {
                    case "string":
                    case "number":
                    case "bigint":
                    case "boolean":
                    case "symbol":
                    case "undefined":
                    case "function":
                        return [key, value];
                    case "object":
                    default: {
                        if (Array.isArray(value)) {
                            return [key, value.map(revealStyles)];
                        }
                        else if (value) {
                            const style = style_store_1.opaqueStyles.get(value);
                            return [key, style ?? value];
                        }
                        else {
                            return [key, value];
                        }
                    }
                }
            }));
        }
    }
}
exports.revealStyles = revealStyles;
//# sourceMappingURL=index.js.map